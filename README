profiles.py -- простой http сервер который эмулирует работу CC_server проде.
В нем реализован api который не зависит от PO с которым работаешь на данный
момент. Здесь есть получение различных email данных профиля для ввода на сайт,
картинки, proxy для проверки почты.

tasks.py -- такой же htts сервер который раздает задание для PO:
страну через которую пойдет траффик, адрес сайта, тип email который нужно
получить. Эти данные нужны для конкретного PO, поэтому эта часть api вынесена
отдельно (на проде это все один сервер).

Обычно для тестового окружения profiles.py работает всегда, а tasks.py
запускается для каждого разрабатываемого PO.

Для работы с PO в tasks.py нужно поменять следующие строки:
в методе __get_surf_task
переменная country: обозначение сраны через которую
подключится http проски(2-х символьный ISO код страны)

переменная landing_url: основной url сайта
переменная tds_url: url редиректа, но для тестового окружения нужно
использовать тот же url что и в landing_url

все эти данные будут указаны в тикете по созданию PO.

в методе __page_object_resolve
переменная inventory:
это связка доменного имени сайта(который берется из landing_ur) и файла самого
PO. Т.е. после запуска miner по url определяет какой PO ему нужно загрузить и
выполнить.

в методе __get_surf_task есть огромный словарь с, собственно "заданием" для PO.
Он определяе поведение PO. Напрмер, нужно ли проверить почту и получить
url для регистрации на сайте.
В этом словаре: surf_behaviour -- это "сценарий" работы PO, который содержит
landing_register -- это регистрация на сайте, если этот параметр
присутствует(он дефакто обязательный) то в самом PO будет вызван метод
landing_register в котором и содержится логика для прохождения этапа
регистрации на сайте.
у landing_register есть параметр email_type, он определяет какого типа eamil
будет передан в PO: soi -- это email который не тредуется проверять(для него не
нужен пароль), doi -- это email для которого указан пароль и который после
выполнения регистрации будет проверен на наличие письма с url для подтверждения
регистрации.
confirm_registration, этот параметр отвечает за то что бы email был проверен на
наличие письма с url. В PO должен быть определен метод
_pop3_email_activation_config который возвращает функции проверки email
(одна находит нужное письмо по отправителю и теме, другая ищет ссылку в теле
письма)
fill_funnel и skip_funnel эти параметры указывают нужно ли проходить этапы
заполнения профиля после регистрации на сайте или как пропустить этап создания
профиля. В PO есть одноименные методы.
site_surf -- серф по сайту, просто переход по различным сраницам сайта и
радомные клики. Параметры серфа -- это итреации, как правило количество
переходв по страницам

/db/emails.csv
формат файла с email:
email,password,domain -- тут все понятно
email_server_type -- тут всегда imap другие не используются(да и в самой
заглушке игнорируется)
gender -- пол владельца email использется в PO
fname,lname -- имя владельца тоже использется в PO
proxy_id -- в тестовом окружении не используется
active -- t для doi email f -- для soi, miner проверяет перед выполнением не
заблокирован ли doi email и если заблокирован, то меняет t на f, т.е. этот
 теперь email можно использовать только как soi

 profiles_<country_code>.json.gz
 список json объектов с данными пользователей которые иногда нужно ввести при
 регистрации. Каждый элемент списка должен содержать одинаковые поля.
 country_code -- тот же что используется в tasks.py только в нижнем регистре.
 От страны к стране набор этих полей разнится.
 Вообще, набор данных произвольный но во многих PO используются:
"TelephoneNumber": "16629845",
"City": "Narrabeen",
"ZipCode": "2101",
"Country": "AU",
"StateFull": "New South Wales",
"State": "NSW",
"CountryFull": "Australia",
"StreetAddress": "1 oak st north narrabeen",

Дополнительно может присутствовать (т.к. на проде эти нанные разделены, но
здесь собраны в одном месте):
"Fname": "Benjamin",
"Lname": "Tephan",
"gender": "male",
"email": "demond_boy_5000@hotmail.com"


